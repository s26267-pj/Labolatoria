// Zaimplementuj program w C++, który rozwiąże za Ciebie łamigłówki Sudoku. 
#include <iostream>
using namespace std;

const int UNASSIGNED = 0; // Puste miejsca w sudoku
const int N = 9; // rozmiar siatki sudoku

// rozpoznaje czy w danym szeregu uzyto juz tej liczby
bool usedInRow(int grid[N][N], int row, int number) {
    for (int col = 0; col < N; col++)
        if (grid[row][col] == number)
            return true;
    return false;
}

// rozpoznaje czy w danej columnie uzyto juz tej liczby
bool usedInCol(int grid[N][N], int col, int number) {
    for (int row = 0; row < N; row++)
        if (grid[row][col] == number)
            return true;
    return false;
}

// zwraca czy w danym boxie uzyto liczby czy nie
bool usedInBox(int grid[N][N], int row, int col, int number) {
    int boxStartRow = row - row % 3;
    int boxStartCol = col - col % 3;
    for (int ii = 0; ii < 3; ii++)
        for (int jj = 0; jj < 3; jj++)
            if (grid[boxStartRow + ii][boxStartCol + jj] == number)
                return true;
    return false;
}

// sprawdza czy jest prawidolowa podana liczba w danym miejscu
bool isValid(int grid[N][N], int row, int col, int number) {
    return !usedInRow(grid, row, number) &&
        !usedInCol(grid, col, number) &&
        !usedInBox(grid, row, col, number);
}

// znajduje pierwsza nie przepisana lub pusta liczbe na sudoku, szereg i kolumna sa przekazywane przez odniesienie
bool findUnassignedLocation(int grid[N][N], int& row, int& col) {
    for (row = 0; row < N; row++)
        for (col = 0; col < N; col++)
            if (grid[row][col] == UNASSIGNED)
                return true;
    return false;
}

// glowna funkcja rozwiazania sudoku
bool solveSudoku(int grid[N][N]) {
    int row, col;

    // jeśli nie ma nieprzypisanej lokalizacji, zwróć true - przypadek podstawowy
    if (!findUnassignedLocation(grid, row, col))
        return true;

    for (int number = 1; number <= 9; number++) {
        // jesli bezpieczne
        if (isValid(grid, row, col, number)) {
            // przypisz wartosc
            grid[row][col] = number;

            if (solveSudoku(grid))
                return true;

            grid[row][col] = UNASSIGNED;
        }
    }
    return false; // to uruchamia cofanie się (backtracking)
}

// pokazuje siatke
void displayGrid(int grid[N][N]) {
    for (int row = 0; row < N; row++) {
        for (int col = 0; col < N; col++)
            cout << grid[row][col] << " ";
        cout << endl;
    }
}

int main() {
    int grid[N][N];

    cout << "Podaj siatke SUDOKU (uzyj 0 dla pustych miejsc): " << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cin >> grid[i][j];
        }
    }
    cout << endl;

    if (solveSudoku(grid) == true) {
        cout << "Rozwiazanie: " << endl;
        displayGrid(grid);
    }
    else {
        cout << "Rozwiazanie nie istnieje. " << endl;
        cout << "Sprawdz czy poprawnie wprowadziles/as dane. " << endl;
    }

    return 0;
}

/*
example:
  0 0 7 9 0 0 6 3 1
  0 0 0 1 0 3 0 4 0
  1 0 0 0 0 5 0 0 9
  6 0 4 8 3 0 0 0 5
  0 0 9 0 0 0 1 0 0
  2 0 0 0 1 7 9 0 4
  5 0 0 3 0 0 0 0 8
  0 9 0 4 0 2 0 0 0
  8 4 6 0 0 1 3 0 0

example2:
  5 3 0 0 7 0 0 0 0
  6 0 0 1 9 5 0 0 0
  0 9 8 0 0 0 0 6 0
  8 0 0 0 6 0 0 0 3
  4 0 0 8 0 3 0 0 1
  7 0 0 0 2 0 0 0 6
  0 6 0 0 0 0 2 8 0
  0 0 0 4 1 9 0 0 5
  0 0 0 0 8 0 0 7 9

example3:
  4 9 0 1 5 7 0 0 0
  0 1 8 0 9 0 0 0 0
  7 5 0 2 8 4 1 0 6
  0 6 0 4 1 5 0 7 0
  1 0 0 7 0 0 4 0 0
  0 0 0 9 0 8 0 6 1
  0 0 7 5 0 0 0 1 3
  6 4 0 0 0 0 2 0 0
  5 0 1 0 7 0 0 8 0
*/
